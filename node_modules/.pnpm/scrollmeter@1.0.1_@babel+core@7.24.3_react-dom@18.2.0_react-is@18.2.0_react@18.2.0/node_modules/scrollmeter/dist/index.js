function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = require('react');
var React__default = _interopDefault(React);
var styled = _interopDefault(require('styled-components'));

function _taggedTemplateLiteralLoose(strings, raw) {
  if (!raw) {
    raw = strings.slice(0);
  }

  strings.raw = raw;
  return strings;
}

var _templateObject;
var StyledScrollMeterDiv = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteralLoose(["\n  width: 100%;\n  height: ", "px;\n  top: ", "px;\n  background: ", ";\n  position: sticky;\n  z-index: 2;\n"])), function (props) {
  return props.height;
}, function (props) {
  return props.top;
}, function (props) {
  return props.background;
});
var IScrollMeterDefaults = {
  leftColor: 'rgba(60, 112, 150, 0.9)',
  rightColor: 'rgba(0, 0, 0, 0.8)',
  direction: 'right',
  duration: 20,
  height: 5,
  top: 0,
  debug: false
};

var ScrollMeter = function ScrollMeter(props) {
  var scrollDiv = React.useRef(null);

  var _useState = React.useState(null),
      timer = _useState[0],
      setTimer = _useState[1];

  React.useEffect(function () {
    window.addEventListener('scroll', function () {
      if (!timer) {
        setTimer(setTimeout(function () {
          setTimer(null);
          handleScrollMeter();
        }, props.duration));
      }
    });
  }, []);

  var handleScrollMeter = function handleScrollMeter() {
    var windowHeight = window.document.body.getBoundingClientRect().height - window.screen.availHeight + 111;
    var poz = window.scrollY;
    var ratio = poz / windowHeight * 100;

    if (scrollDiv.current) {
      var color = "linear-gradient(to " + props.direction + ", " + props.leftColor + " " + ratio + "%, " + props.rightColor + " " + ratio + "% " + (100 - ratio) + "%)";
      scrollDiv.current.style.background = color;
      if (props.debug) console.log("windowHeight: " + windowHeight + ", poz: " + poz + ", ratio: " + ratio + ", color: " + color);
    }
  };

  return React__default.createElement(StyledScrollMeterDiv, {
    ref: scrollDiv,
    height: props.height,
    top: props.top,
    background: props.rightColor
  });
};

ScrollMeter.defaultProps = IScrollMeterDefaults;

module.exports = ScrollMeter;
//# sourceMappingURL=index.js.map
